# from bohr.heuristics.templates
from bohr.snorkel_utils import BUG, BUGLESS, ABSTAIN, commit_lf, keyword_lfs
import re
from bohr.snorkel_utils import Commit

BUG_MESSAGE_KEYWORDS = [
   'bad',
   ['bug', 'bugg'],
   'broken',
   'concurr',
   ['correct', 'correctli'],
   'corrupt',
   'crash', 
   ['deadlock', 'dead lock'],
   'defect',
   'endless',
   'ensur',
   'error',
   ['fail', 'failur'],
   ['fix', 'hotfix', 'quickfix', 'small fix'],
   'garbag',
   'incomplet',
   'inconsist',
   'incorrect',
   'infinit',
   'invalid',
   'issue',
   'leak',
   'loop',
   'mistak',
   ['nullpointer', 'npe', 'null pointer'],
   ['not work'],
   ['not return'],
   ['outofbound', 'of bound'],
   'prevent',
   'problem',
   'properli',
   ['race condit'],
   'repair',
   'solv',
   ['threw', 'throw'],
   'timeout',
   'unabl',
   'unclos',
   'unexpect',
   'unknown',
   'unsynchron',
   'wrong',
   'except',
]

BUG_ISSUE_LABEL_KEYWORDS = [
    'bad',
    'broken',
    ['bug', 'bugg'],
    'close',
    'concurr',
    'correct',
    'crash',
    'defect',
    'error',
    ['fail', 'failur', 'fault'],
    ['fix', 'hotfix', 'quickfix'],
    'handl',
    'invalid',
    'issue',
    'logic',
    'merg',
    'minor',
    'unknown'
]

BUG_ISSUE_BODY_KEYWORDS = [
    'bad',
    'broken',
    ['bug', 'bugg'],
    'close', 
    'concurr',
    ['correct', 'correctli'],
    'corrupt', 'crash',
    ['deadlock', 'dead lock'],
    'defect',
    'disabl',
    'endless',
    'ensur',
    'error',
    ['fail', 'failur', 'fault'],
    ['fix', 'hotfix', 'quickfix'],
    'garbag',
    'handl', 
    'incomplet',
    'inconsist',
    'incorrect',
    'infinit',
    'invalid',
    'issue',
    'leak',
    'loop',
    'minor',
    'mistak',
    'patch',
    'prevent',
    'problem',
    'properli',
    'repair',
    ['resolv', 'solv'],
    ['threw', 'throw'],
    'timeout',
    'unabl',
    'unclos',
    'unexpect',
    'unknown',
    'unsynchron',
    'wrong',
    'except',
    ['nullpointer', 'npe'],
    ['outofbound', 'of bound']
]


NO_BUG_MESSAGE_KEYWORDS = [
    'abil',
    'ad',
    'add',
    'addit',
    'allow',
    'analysi',
    'baselin',
    'beautification',
    'benchmark',
    'better',
    ['clean', 'cleanup'],
    'comment',
    'complet',
    'consolid',
    'create',
    'deprec',
    'develop',
    ['doc', 'document'],
    'enhanc',
    'exampl',
    'exclud',
    'extendgener',
    'gitignor',
    'implement',
    'improv',
    'includ', 
    'info',
    'intorduc',
    'javadoc',
    'log',
    'migrat',
    'minim',
    'move',
    'new',
    'note',
    'opinion',
    ['optim', 'optimis'],
    'perform',
    'plugin',
    'polish',
    'prepar',
    'provid',
    'publish',
    'readm',
    'refactor',
    'reformat',
    'release',
    'restructur',
    'simplif',
    'simplifi',
    'stage',
    'stat',
    'statist',
    'support',
    'switch',
    'todo',
    'tweak',
    'updat',
    'upgrad',
    'version',
    'featur'
]

NO_BUG_ISSUE_LABEL_KEYWORDS = [
    'ad',
    'add',
    'addit',
    'build',
    'bump',
    'chang',
    'check',
    'cleanup',
    'complet',
    'deprec', 
    'document',
    'dont',
    'enhanc',
    'exampl',
    'exclud',
    'idea',
    'implement',
    'improv',
    'info',
    'junit',
    'migrat',
    'miss',
    'modif',
    'new',
    'note',
    'optim',
    'perform',
    'plugin',
    'possibl',
    'propos',
    'provid',
    'publish',
    'readm',
    'reduc',
    'refactor',
    'refin',
    'reimplement',
    'renam',
    'reorgan',
    'replac',
    'restructur',
    'review',
    'rewrit',
    'rid',
    ['speedup', 'speed up'],
    'todo',
    'unit',
    'updat',
    'featur'
]

NO_BUG_ISSUE_BODY_KEYWORDS = [
    'abil',
    'ad',
    'add',
    'addit',
    'allow',
    'analysi',
    'avoid',
    'baselin',
    'benchmark',
    'better',
    'bump',
    'cleanup',
    'consolid',
    'convert',
    'create',
    'deprec',
    'develop',
    ['doc', 'document', 'javadoc'],
    'drop',
    'enhanc',
    'exclud',
    'expand',
    'extendgener',
    'forget',
    'format',
    'gitignor',
    'idea',
    'implement',
    'improv',
    'includ',
    'intorduc',
    'limit', 
    'modif',
    'move',
    'new',
    'note',
    'opinion',
    ['optim', 'optimis'],
    'perform',
    'plugin',
    'polish', 
    'possibl',
    'prepar',
    'propos',
    'provid',
    'publish',
    'readm',
    'reduc',
    'refactor',
    'refin',
    'reimplement',
    'remov',
    'renam',
    'reorgan',
    'replac',
    'restrict',
    'restructur',
    'review',
    'rewrit',
    'rid',
    'simplif',
    'simplifi',
    ['speedup', 'speed up'],
    'statist',
    'support',
    'test',
    'coverag',
    'todo',
    'tweak',
    'unit',
    'unnecessari',
    'updat',
    'upgrad',    
    'featur',
    'regress test',
    'set up',
    'configur chang',
    'chang log',
    'speed up',
    'test pass',
    'pass test',
    'perf test',
    'perfom test',
    'test coverag'
]


lfs = [
    *keyword_lfs(BUG_MESSAGE_KEYWORDS, 'message', BUG),
    *keyword_lfs(BUG_ISSUE_LABEL_KEYWORDS, 'issue_label', BUG),
    *keyword_lfs(BUG_ISSUE_BODY_KEYWORDS, 'issue_body', BUG),

    *keyword_lfs(NO_BUG_MESSAGE_KEYWORDS, 'message', BUGLESS),
    *keyword_lfs(NO_BUG_ISSUE_LABEL_KEYWORDS, 'issue_label', BUGLESS),
    *keyword_lfs(NO_BUG_ISSUE_BODY_KEYWORDS, 'issue_body', BUGLESS),
]

BOGUS_FIX_KEYWORDS = set(["ad", "add", "build", "chang", "doc", "document",
                          "javadoc", "junit", "messag", "report", "test", "typo", "unit", "warn"])


GITHUB_REF_RE = re.compile(r"gh(-|\s)\d+", flags=re.I)
VERSION_RE = re.compile(r"v\d+.*", flags=re.I)


@commit_lf()
def github_ref_in_message(commit):
    return BUG if GITHUB_REF_RE.search(commit.message.raw) else ABSTAIN

@commit_lf()
def version_in_message(commit):
    return BUGLESS if VERSION_RE.search(commit.message.raw) else ABSTAIN

#@commit_lf()
def bogus_fix_keyword_in_message(commit: Commit):
    if 'fix' in commit.message.stems or 'bug' in commit.message.stems:
        if commit.message.match(BOGUS_FIX_KEYWORDS):
            return BUGLESS
        else:
            return BUG
    return ABSTAIN

#@commit_lf()
def no_files_have_modified_status(commit: Commit):
    for file in commit.files:
        if file.status == 'modified': return ABSTAIN
        if file.status == 'added': return ABSTAIN
    return BUGLESS        
